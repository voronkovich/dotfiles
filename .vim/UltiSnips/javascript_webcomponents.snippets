snippet wcdef "Web Component / Define"
customElements.define('${1}', ${2})
endsnippet

snippet wcdefe "Web Component / Define with extends"
customElements.define('${1}', ${2}, {
	extends: '${3}',
})
endsnippet

snippet wcbase "Web Component / Base class"
const template = document.createElement('template')
template.innerHTML = \`
	<style>
	:host {
		all: initial;
		contain: content;
	}
	</style>
	<slot></slot>
\`

export default class extends HTML${1}Element {
	constructor() {
		super()

		this.attachShadow({ mode: 'open' })
		this.shadowRoot.append(template.content.cloneNode(true))
	}

	connectedCallback() {
		${VISUAL}${0}
	}
}
endsnippet

snippet wcattr "Web Component / Attribute accessors"
get ${1}() {
	return this.getAttribute('$1')${2: || '${3:default}'}
}

set $1(value) {
	this.setAttribute('$1', value)
}
endsnippet

snippet wcattrbool "Web Component / Attribute boolean"
get ${1}() {
	return this.hasAttribute('$1')
}

set $1(value) {
	if (value) {
		this.removeAttribute('$1')
	} else {
		this.setAttribute('$1', '')
	}
}
endsnippet

snippet wcattrobserve "Web Component / Attributes observe" b
static get observedAttributes() {
	return [ '${1}' ]
}

attributeChangedCallback(attr, prev, value) {
	${VISUAL}${0}
}
endsnippet
