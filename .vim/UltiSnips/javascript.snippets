snippet c "const" b
const ${1} = ${2}
endsnippet

snippet l "let" b
let ${1} = ${2}
endsnippet

snippet v "var" b
var ${1} = ${2}
endsnippet

snippet class "Class" b
class ${1} {
	${0}${VISUAL}
}
endsnippet

snippet m "Method" b
${1}(${2}) {
	${VISUAL}${0}
}
endsnippet

snippet get "Getter" b
get ${1}() {
	${VISUAL}${0}
}
endsnippet

snippet set "Setter" b
set ${1}(${2}) {
	${VISUAL}${0}
}
endsnippet

snippet fu "Function" i
function ${1}(${2}) {
	${VISUAL}${0}
}
endsnippet

snippet fn "Arrow function" i
(${1}) => {
	${VISUAL}${0}
}
endsnippet

snippet domlistener "Event listener" b
${1:document}.addEventListener('${2:DOMContentLoaded}', ${3:function})
endsnippet

snippet domloaded "DOMContentLoaded" b
if (document.readyState === 'loading') {
	document.addEventListener('DOMContentLoaded', ${1})
} else {
	$1()
}
endsnippet

snippet domquery "document.querySelector"
document.querySelector${1:All}('${2}')
endsnippet

snippet it "it()" b
it('${1}', () => {
	${VISUAL}${0}
})
endsnippet

snippet O "Object."
Object.
endsnippet

snippet Oc "Object.create"
Object.create(${1:null})
endsnippet

snippet Oa "Object.assign"
Object.assign(${1})
endsnippet

snippet Of "Object.freeze"
Object.freeze(${1})
endsnippet

snippet ,t "this." iA
this.
endsnippet

snippet ,# "this." iA
this.#
endsnippet

snippet ,r "return" bA
return ${0}
endsnippet

snippet throw "throw Error"
throw Error(${1})
endsnippet

snippet ifdef "if defined" b
if (typeof ${1} !== 'undefined') {
	${VISUAL}${0}
}
endsnippet

snippet fetch "fetch()" b
fetch(${1})
	.then(res => res.json())
	.then(data => ${2})
	.catch(console.log)
endsnippet

snippet promise "Promise"
new Promise((resolve, reject) => {
	${VISUAL}${0}
})
endsnippet

snippet .then "Promise.then()" i
.then(${1:result} => ${VISUAL}${0})
endsnippet

snippet .catch "Promise.catch()" i
.catch(error => ${VISUAL}${0})
endsnippet

snippet timeout "setTimeout"
setTimeout(() => {
	${VISUAL}${0}
}, ${1})
endsnippet

snippet : "{}" b
${1}: {
	${VISUAL}${0}
},
endsnippet

snippet .map ".map()" i
.map(${1:item} => ${0})
endsnippet

snippet .reduce ".reduce()" i
.reduce((${1:result}, ${2:item}) => ${0})
endsnippet

snippet .filter ".filter()" i
.filter(${1:item} => ${0})
endsnippet
