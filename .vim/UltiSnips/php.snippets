snippet @a "@Assert"
@Assert\\${1:NotBlank}${2:(${3})}
endsnippet

snippet #a "#[Assert"
#[Assert\\${1:NotBlank}${2:(${3})}]
endsnippet

snippet @o "@ORM"
@ORM\\${1}
endsnippet

snippet #o "#[ORM"
#[ORM\\${1}]
endsnippet

snippet vd "var_dump()" b
var_dump(${1:${VISUAL/;$//}});
endsnippet

snippet du "Symfony dump()" b
dump(${1:${VISUAL/;$//}});
endsnippet

snippet "([^\w])sp" "sprintf" r
`!p snip.rv = match.group(1)`\sprintf('${1}', ${2})
endsnippet

snippet putesta "PHPUnit test" b
/** @test */
public function ${1}()
{
	${VISUAL}${0}
}
endsnippet

snippet puit "PHPUnit test (it)" b
public function testIt${1}()
{
	${VISUAL}${0}
}
endsnippet

snippet puita "PHPUnit test (it)" b
/** @test */
public function it${1}()
{
	${VISUAL}${0}
}
endsnippet

snippet desc "Describe spec" b
describe('${1}', function () {
	${VISUAL}${0};
});
endsnippet

snippet it "Test" b
it('${1}', function () {
	${VISUAL}${0};
});
endsnippet

snippet given "Given" b
given('${1}', function () {
	${VISUAL}${0};
});
endsnippet

snippet exp "expect()" b
expect(${1})->to${2}(${3});
endsnippet

snippet php "description" b
<?php`!v sniphpets#header()`

endsnippet

snippet sfturbo "Symfony / Controller / Turbo stream"
if (TurboBundle::STREAM_FORMAT === $request->getPreferredFormat()) {
	$request->setRequestFormat(TurboBundle::STREAM_FORMAT);

	${VISUAL}${0}
}
endsnippet
